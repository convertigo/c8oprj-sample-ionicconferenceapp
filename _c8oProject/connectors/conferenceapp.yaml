↑default: true
databaseName: conferenceapp
↓CheckDocument [transactions.couchdb.GetDocumentTransaction]: 
  ↓_use_docid [variables.RequestableVariable-1514456392148]: 
    description: Document ID
    value: 10_Workshop
↓GetServerInfo [transactions.couchdb.GetServerInfoTransaction]: 
  ↑default: true
↓PostBulkDocumentsMaps [transactions.couchdb.PostBulkDocumentsTransaction]: 
  ↓_id [variables.RequestableMultiValuedVariable-1504518118589]: 
  ↓center [variables.RequestableMultiValuedVariable-1504518118596]: 
  ↓lat [variables.RequestableMultiValuedVariable-1504518118601]: 
  ↓lng [variables.RequestableMultiValuedVariable-1504518118605]: 
  ↓name [variables.RequestableMultiValuedVariable-1504518118610]: 
↓PostBulkDocumentsSchedule [transactions.couchdb.PostBulkDocumentsTransaction]: 
  ↓_id [variables.RequestableMultiValuedVariable-1504516819304]: 
  ↓name [variables.RequestableMultiValuedVariable-1504517158325]: 
  ↓location [variables.RequestableMultiValuedVariable-1504517156151]: 
  ↓timeEnd [variables.RequestableMultiValuedVariable-1504517188050]: 
  ↓timeStart [variables.RequestableMultiValuedVariable-1504517198160]: 
  ↓tracks [variables.RequestableMultiValuedVariable-1504517200273]: 
  ↓group [variables.RequestableMultiValuedVariable-1504517202737]: 
  ↓description [variables.RequestableMultiValuedVariable-1504517205808]: 
  ↓speakerNames [variables.RequestableMultiValuedVariable-1504516138997]: 
  ↓favorite [variables.RequestableMultiValuedVariable-1504625786703]: 
↓PostBulkDocumentsSchedule_object_id [transactions.couchdb.PostBulkDocumentsTransaction]: 
  ↓_id [variables.RequestableMultiValuedVariable-1504690854338]: 
  ↓data [variables.RequestableMultiValuedVariable-1504690854345]: 
↓PostBulkDocumentsSpeakers [transactions.couchdb.PostBulkDocumentsTransaction]: 
  ↓_id [variables.RequestableMultiValuedVariable-1504517733238]: 
  ↓name [variables.RequestableMultiValuedVariable-1504517733250]: 
  ↓location [variables.RequestableMultiValuedVariable-1504517733256]: 
  ↓about [variables.RequestableMultiValuedVariable-1504517733260]: 
  ↓email [variables.RequestableMultiValuedVariable-1504517733265]: 
  ↓phone [variables.RequestableMultiValuedVariable-1504517733269]: 
  ↓profilePic [variables.RequestableMultiValuedVariable-1504517733273]: 
  ↓twitter [variables.RequestableMultiValuedVariable-1504517733277]: 
↓PostBulkDocumentsTracks [transactions.couchdb.PostBulkDocumentsTransaction]: 
  ↓_id [variables.RequestableMultiValuedVariable-1504614000664]: 
  ↓value [variables.RequestableMultiValuedVariable-1504614970212]: 
  ↓visible [variables.RequestableMultiValuedVariable-1504614000669]: 
↓PutDocumentAttachment [transactions.couchdb.PutDocumentAttachmentTransaction]: 
  ↓_use_attpath [variables.RequestableVariable-1504786406010]: 
    description: Attachment path | This path is either absolute or relative to Convertigo environment. Relative paths starting with:<br/><br/>• <span class="computer">./</span> are relative to Convertigo workspace,<br/>• <span class="computer">.//</span> are relative to current project folder. <br/><br/>
  ↓_use_docid [variables.RequestableVariable-1504786406017]: 
    description: Document ID
  ↓_use_attname [variables.RequestableVariable-1504786406023]: 
    description: Attachment name
    xmlTypeAffectation: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.common.XmlQName
        - schemaDefinition: 
          - ↑pLocalPart: int
          - ↑pNamespace: http://www.w3.org/2001/XMLSchema
↓map [couchdb.DesignDocument]: 
  docdata: 
    →: |
      '{
        "_id": "_design\/map",
        "filters": {},
        "updates": {},
        "views": {"all": {"map": "function (doc) {\r\n
          try {\r\n
      \r\n
          if(doc._id.indexOf(\"_\") == -1){\r\n
              emit(doc._id,{center: doc.center, lat: doc.lat, lng: doc.lng, name: doc.name});\r\n
          }\r\n
          \r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"}}
      }'
↓schedule [couchdb.DesignDocument]: 
  docdata: 
    →: |
      '{
        "_id": "_design\/schedule",
        "filters": {},
        "updates": {},
        "views": {
          "group": {
            "map": "function (doc) {\r\n
          try {\r\n
              if(doc.group != null){\r\n
                  emit(doc.group, {name: doc.name, group: doc.group, location: doc.location, timeEnd: doc.timeEnd, timeStart: doc.timeStart, tracks: doc.tracks, favorite: doc.favorite});\r\n
              }\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }",
            "reduce": "function (keys, values, rereduce) {\r\n
          try {\r\n
              return 0;\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"
          },
          "all": {"map": "function (doc) {\r\n
          try {\r\n
              if(doc.group != null){\r\n
                  emit(doc._id, doc._rev, {name: doc.name, group: doc.group, location: doc.location, timeEnd: doc.timeEnd, timeStart: doc.timeStart, tracks: doc.tracks, favorite: doc.favorite});\r\n
              }\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"},
          "favoritebygroup": {
            "map": "function (doc) {\r\n
          try {\r\n
          if(doc.group != null && doc.favorite == true){\r\n
              emit(doc.group, {name: doc.name, group: doc.group, location: doc.location, timeEnd: doc.timeEnd, timeStart: doc.timeStart, tracks: doc.tracks, favorite: doc.favorite});\r\n
          }\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }",
            "reduce": "function (keys, values, rereduce) {\r\n
          try {\r\n
              return 0;\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"
          },
          "allbysearch": {"map": "function (doc) {\r\n
          try {\r\n
              if(doc.group != null){\r\n
                  emit(doc.name.toLowerCase(), {name: doc.name, group: doc.group, location: doc.location, timeEnd: doc.timeEnd, timeStart: doc.timeStart, tracks: doc.tracks, favorite: doc.favorite});\r\n
              }\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"}
        }
      }'
↓speaker [couchdb.DesignDocument]: 
  docdata: 
    →: |
      '{
        "_id": "_design\/speaker",
        "filters": {},
        "updates": {},
        "views": {
          "all": {"map": "function (doc) {\r\n
          try {\r\n
          if(doc._id.indexOf(\"_speakers\") !== -1){\r\n
              emit(doc._id,{about: doc.about, email: doc.email, location: doc.location, name: doc.name, phone: doc.phone, profilePic: doc.ProfilePic, twitter: doc.twitter});\r\n
          }\r\n
              \r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"},
          "view": {"map": "function (doc) {\r\n
          try {\r\n
              for (var i = 0, len = doc.speakerNames.length; i < len; i++) {\r\n
                  if(doc.speakerNames[i]){\r\n
                      emit(doc._id, doc._rev, {name: doc.name});\r\n
                  }\r\n
              }\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }\r\n
      "},
          "sessionBySpeaker": {"map": "function (doc) {\r\n
          try {\r\n
              if(doc.speakerNames){\r\n
                  emit(doc.speakerNames, {name: doc.name, id: doc._id});\r\n
              }    \r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"}
        }
      }'
↓tracks [couchdb.DesignDocument]: 
  docdata: 
    →: |
      '{
        "_id": "_design\/tracks",
        "filters": {},
        "updates": {},
        "views": {
          "all": {"map": "function (doc) {\r\n
          try {\r\n
              if(doc.visible != null){\r\n
                  emit(doc._id, {value: doc.value, visible: doc.visible, rev: doc.rev});\r\n
              }\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"},
          "allbyname": {"map": "function (doc) {\r\n
          try {\r\n
              if(doc.visible != null){\r\n
                  emit(doc.value, {visible: doc.visible});\r\n
              }\r\n
          } catch (err) {\r\n
              log(err.message);\r\n
          }\r\n
      }"}
        }
      }'